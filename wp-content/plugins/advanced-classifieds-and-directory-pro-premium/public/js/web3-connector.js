/**Mel: 25/01/22
 * To process creation of smart contract and minting of tokens
 *
 */

const abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "myName",
        type: "string",
      },
      {
        internalType: "string",
        name: "mySymbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "createToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const byteCode =
  "60806040523480156200001157600080fd5b5060405162002be738038062002be7833981810160405281019062000037919062000197565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b50505050506200037a565b82805462000083906200029f565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000233565b6200020a565b9050828152602081018484840111156200015557600080fd5b6200016284828562000269565b509392505050565b600082601f8301126200017c57600080fd5b81516200018e84826020860162000125565b91505092915050565b60008060408385031215620001ab57600080fd5b600083015167ffffffffffffffff811115620001c657600080fd5b620001d4858286016200016a565b925050602083015167ffffffffffffffff811115620001f257600080fd5b62000200858286016200016a565b9150509250929050565b60006200021662000229565b9050620002248282620002d5565b919050565b6000604051905090565b600067ffffffffffffffff8211156200025157620002506200033a565b5b6200025c8262000369565b9050602081019050919050565b60005b83811015620002895780820151818401526020810190506200026c565b8381111562000299576000848401525b50505050565b60006002820490506001821680620002b857607f821691505b60208210811415620002cf57620002ce6200030b565b5b50919050565b620002e08262000369565b810181811067ffffffffffffffff821117156200030257620003016200033a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61285d806200038a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb4651461026f578063b88d4fde1461028b578063c87b56dd146102a7578063e985e9c5146102d7576100ea565b80636352211e146101f157806370a082311461022157806395d89b4114610251576100ea565b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018957806342842e0e146101a557806345576f94146101c1576100ea565b806301ffc9a7146100ef57806306fdde031461011f578063081812fc1461013d575b600080fd5b61010960048036038101906101049190611b37565b610307565b6040516101169190611ef2565b60405180910390f35b6101276103e9565b6040516101349190611f0d565b60405180910390f35b61015760048036038101906101529190611bca565b61047b565b6040516101649190611e8b565b60405180910390f35b61018760048036038101906101829190611afb565b6104c1565b005b6101a3600480360381019061019e91906119f5565b6105d9565b005b6101bf60048036038101906101ba91906119f5565b610639565b005b6101db60048036038101906101d69190611b89565b610659565b6040516101e891906120af565b60405180910390f35b61020b60048036038101906102069190611bca565b610690565b6040516102189190611e8b565b60405180910390f35b61023b60048036038101906102369190611990565b610742565b60405161024891906120af565b60405180910390f35b6102596107fa565b6040516102669190611f0d565b60405180910390f35b61028960048036038101906102849190611abf565b61088c565b005b6102a560048036038101906102a09190611a44565b6108a2565b005b6102c160048036038101906102bc9190611bca565b610904565b6040516102ce9190611f0d565b60405180910390f35b6102f160048036038101906102ec91906119b9565b610a17565b6040516102fe9190611ef2565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103e257506103e182610aab565b5b9050919050565b6060600080546103f890612305565b80601f016020809104026020016040519081016040528092919081815260200182805461042490612305565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b5050505050905090565b600061048682610b15565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104cc82610690565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561053d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105349061206f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661055c610b60565b73ffffffffffffffffffffffffffffffffffffffff16148061058b575061058a81610585610b60565b610a17565b5b6105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c19061200f565b60405180910390fd5b6105d48383610b68565b505050565b6105ea6105e4610b60565b82610c21565b610629576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106209061208f565b60405180910390fd5b610634838383610cb6565b505050565b610654838383604051806020016040528060008152506108a2565b505050565b60006106656007610f1d565b60006106716007610f33565b905061067d3382610f41565b610687818461111b565b80915050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107309061204f565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90611fcf565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461080990612305565b80601f016020809104026020016040519081016040528092919081815260200182805461083590612305565b80156108825780601f1061085757610100808354040283529160200191610882565b820191906000526020600020905b81548152906001019060200180831161086557829003601f168201915b5050505050905090565b61089e610897610b60565b838361118f565b5050565b6108b36108ad610b60565b83610c21565b6108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e99061208f565b60405180910390fd5b6108fe848484846112fc565b50505050565b606061090f82610b15565b600060066000848152602001908152602001600020805461092f90612305565b80601f016020809104026020016040519081016040528092919081815260200182805461095b90612305565b80156109a85780601f1061097d576101008083540402835291602001916109a8565b820191906000526020600020905b81548152906001019060200180831161098b57829003601f168201915b5050505050905060006109b9611358565b90506000815114156109cf578192505050610a12565b600082511115610a045780826040516020016109ec929190611e67565b60405160208183030381529060405292505050610a12565b610a0d8461136f565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610b1e816113d7565b610b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b549061204f565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610bdb83610690565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c2d83610690565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c6f5750610c6e8185610a17565b5b80610cad57508373ffffffffffffffffffffffffffffffffffffffff16610c958461047b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610cd682610690565b73ffffffffffffffffffffffffffffffffffffffff1614610d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2390611f4f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390611f8f565b60405180910390fd5b610da7838383611443565b610db2600082610b68565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e02919061221b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e599190612194565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f18838383611448565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa89061202f565b60405180910390fd5b610fba816113d7565b15610ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff190611f6f565b60405180910390fd5b61100660008383611443565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110569190612194565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461111760008383611448565b5050565b611124826113d7565b611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a90611fef565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061118a9291906117b4565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f590611faf565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112ef9190611ef2565b60405180910390a3505050565b611307848484610cb6565b6113138484848461144d565b611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134990611f2f565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061137a82610b15565b6000611384611358565b905060008151116113a457604051806020016040528060008152506113cf565b806113ae846115e4565b6040516020016113bf929190611e67565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061146e8473ffffffffffffffffffffffffffffffffffffffff16611791565b156115d7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611497610b60565b8786866040518563ffffffff1660e01b81526004016114b99493929190611ea6565b602060405180830381600087803b1580156114d357600080fd5b505af192505050801561150457506040513d601f19601f820116820180604052508101906115019190611b60565b60015b611587573d8060008114611534576040519150601f19603f3d011682016040523d82523d6000602084013e611539565b606091505b5060008151141561157f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157690611f2f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506115dc565b600190505b949350505050565b6060600082141561162c576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061178c565b600082905060005b6000821461165e57808061164790612368565b915050600a8261165791906121ea565b9150611634565b60008167ffffffffffffffff8111156116a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156116d25781602001600182028036833780820191505090505b5090505b60008514611785576001826116eb919061221b565b9150600a856116fa91906123b1565b60306117069190612194565b60f81b818381518110611742577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561177e91906121ea565b94506116d6565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546117c090612305565b90600052602060002090601f0160209004810192826117e25760008555611829565b82601f106117fb57805160ff1916838001178555611829565b82800160010185558215611829579182015b8281111561182857825182559160200191906001019061180d565b5b509050611836919061183a565b5090565b5b8082111561185357600081600090555060010161183b565b5090565b600061186a611865846120ef565b6120ca565b90508281526020810184848401111561188257600080fd5b61188d8482856122c3565b509392505050565b60006118a86118a384612120565b6120ca565b9050828152602081018484840111156118c057600080fd5b6118cb8482856122c3565b509392505050565b6000813590506118e2816127cb565b92915050565b6000813590506118f7816127e2565b92915050565b60008135905061190c816127f9565b92915050565b600081519050611921816127f9565b92915050565b600082601f83011261193857600080fd5b8135611948848260208601611857565b91505092915050565b600082601f83011261196257600080fd5b8135611972848260208601611895565b91505092915050565b60008135905061198a81612810565b92915050565b6000602082840312156119a257600080fd5b60006119b0848285016118d3565b91505092915050565b600080604083850312156119cc57600080fd5b60006119da858286016118d3565b92505060206119eb858286016118d3565b9150509250929050565b600080600060608486031215611a0a57600080fd5b6000611a18868287016118d3565b9350506020611a29868287016118d3565b9250506040611a3a8682870161197b565b9150509250925092565b60008060008060808587031215611a5a57600080fd5b6000611a68878288016118d3565b9450506020611a79878288016118d3565b9350506040611a8a8782880161197b565b925050606085013567ffffffffffffffff811115611aa757600080fd5b611ab387828801611927565b91505092959194509250565b60008060408385031215611ad257600080fd5b6000611ae0858286016118d3565b9250506020611af1858286016118e8565b9150509250929050565b60008060408385031215611b0e57600080fd5b6000611b1c858286016118d3565b9250506020611b2d8582860161197b565b9150509250929050565b600060208284031215611b4957600080fd5b6000611b57848285016118fd565b91505092915050565b600060208284031215611b7257600080fd5b6000611b8084828501611912565b91505092915050565b600060208284031215611b9b57600080fd5b600082013567ffffffffffffffff811115611bb557600080fd5b611bc184828501611951565b91505092915050565b600060208284031215611bdc57600080fd5b6000611bea8482850161197b565b91505092915050565b611bfc8161224f565b82525050565b611c0b81612261565b82525050565b6000611c1c82612151565b611c268185612167565b9350611c368185602086016122d2565b611c3f8161249e565b840191505092915050565b6000611c558261215c565b611c5f8185612178565b9350611c6f8185602086016122d2565b611c788161249e565b840191505092915050565b6000611c8e8261215c565b611c988185612189565b9350611ca88185602086016122d2565b80840191505092915050565b6000611cc1603283612178565b9150611ccc826124af565b604082019050919050565b6000611ce4602583612178565b9150611cef826124fe565b604082019050919050565b6000611d07601c83612178565b9150611d128261254d565b602082019050919050565b6000611d2a602483612178565b9150611d3582612576565b604082019050919050565b6000611d4d601983612178565b9150611d58826125c5565b602082019050919050565b6000611d70602983612178565b9150611d7b826125ee565b604082019050919050565b6000611d93602e83612178565b9150611d9e8261263d565b604082019050919050565b6000611db6603e83612178565b9150611dc18261268c565b604082019050919050565b6000611dd9602083612178565b9150611de4826126db565b602082019050919050565b6000611dfc601883612178565b9150611e0782612704565b602082019050919050565b6000611e1f602183612178565b9150611e2a8261272d565b604082019050919050565b6000611e42602e83612178565b9150611e4d8261277c565b604082019050919050565b611e61816122b9565b82525050565b6000611e738285611c83565b9150611e7f8284611c83565b91508190509392505050565b6000602082019050611ea06000830184611bf3565b92915050565b6000608082019050611ebb6000830187611bf3565b611ec86020830186611bf3565b611ed56040830185611e58565b8181036060830152611ee78184611c11565b905095945050505050565b6000602082019050611f076000830184611c02565b92915050565b60006020820190508181036000830152611f278184611c4a565b905092915050565b60006020820190508181036000830152611f4881611cb4565b9050919050565b60006020820190508181036000830152611f6881611cd7565b9050919050565b60006020820190508181036000830152611f8881611cfa565b9050919050565b60006020820190508181036000830152611fa881611d1d565b9050919050565b60006020820190508181036000830152611fc881611d40565b9050919050565b60006020820190508181036000830152611fe881611d63565b9050919050565b6000602082019050818103600083015261200881611d86565b9050919050565b6000602082019050818103600083015261202881611da9565b9050919050565b6000602082019050818103600083015261204881611dcc565b9050919050565b6000602082019050818103600083015261206881611def565b9050919050565b6000602082019050818103600083015261208881611e12565b9050919050565b600060208201905081810360008301526120a881611e35565b9050919050565b60006020820190506120c46000830184611e58565b92915050565b60006120d46120e5565b90506120e08282612337565b919050565b6000604051905090565b600067ffffffffffffffff82111561210a5761210961246f565b5b6121138261249e565b9050602081019050919050565b600067ffffffffffffffff82111561213b5761213a61246f565b5b6121448261249e565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061219f826122b9565b91506121aa836122b9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121df576121de6123e2565b5b828201905092915050565b60006121f5826122b9565b9150612200836122b9565b9250826122105761220f612411565b5b828204905092915050565b6000612226826122b9565b9150612231836122b9565b925082821015612244576122436123e2565b5b828203905092915050565b600061225a82612299565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156122f05780820151818401526020810190506122d5565b838111156122ff576000848401525b50505050565b6000600282049050600182168061231d57607f821691505b6020821081141561233157612330612440565b5b50919050565b6123408261249e565b810181811067ffffffffffffffff8211171561235f5761235e61246f565b5b80604052505050565b6000612373826122b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156123a6576123a56123e2565b5b600182019050919050565b60006123bc826122b9565b91506123c7836122b9565b9250826123d7576123d6612411565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6127d48161224f565b81146127df57600080fd5b50565b6127eb81612261565b81146127f657600080fd5b50565b6128028161226d565b811461280d57600080fd5b50565b612819816122b9565b811461282457600080fd5b5056fea2646970667358221220321101cbcafc157d846b0c094b64088d8ac3f20edc58286c762d4ee4fe10407364736f6c63430008030033";

(function ($) {
  "use strict";

  window.addEventListener("load", async () => {
    //To bring out the Metamask fox
    try {
      const accounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
    } catch (error) {
      alert(
        "No wallet detected. Please install a blockchain wallet like Metamask"
      );

      //Mel: 05/02/22. Redirect to main page
      document.location.href = "/";
    }

    // A Web3Provider wraps a standard Web3 provider, which is
    // what MetaMask injects as window.ethereum into each page
    const provider = new ethers.providers.Web3Provider(window.ethereum);

    // The MetaMask plugin also allows signing transactions to
    // send ether and pay to change state within the blockchain.
    // For this, you need the account signer...
    const signer = provider.getSigner();

    const walletAddress = await signer.getAddress();

    console.log("Wallet: " + walletAddress);

    $("#acadp-post-form-contract").on("submit", async function (e) {
      //$("#acadp-post-form-contract").submit(async function () {
      //button.addEventListener("click", async function (event) {
      e.preventDefault();

      const contractName = document.getElementById("acadp-contract-name");
      const contractSymbol = document.getElementById("acadp-contract-symbol");

      if (contractName != null) {
        var contractNameValue = contractName.value;
      }

      if (contractSymbol != null) {
        var contractSymbolValue = contractSymbol.value;
      }

      try {
        $("#create-contract").prop("disabled", true);
        $("#loading").html('<span class="acadp-spinner"></span>');

        const factory = new ethers.ContractFactory(abi, byteCode, signer);

        // If your contract requires constructor args, you can specify them here
        const contract = await factory.deploy(
          contractNameValue,
          contractSymbolValue,
          {
            gasLimit: 4700000,
          }
        );

        // The transaction that was sent to the network to deploy the Contract
        console.log(`Transaction hash: ${contract.deployTransaction.hash}`);

        // The contract is NOT deployed yet; we must wait until it is mined
        const receipt = await contract.deployTransaction.wait();

        console.log(`Transaction confirmed in block ${receipt.blockNumber}`);
        console.log(`Gas used: ${receipt.gasUsed.toString()}`);

        console.log(`Contract address: ${contract.address}`);
        console.log(contract.deployTransaction);

        $("#wallet-address").val(walletAddress);
        $("#contract-address").val(contract.address);
        $("#contract-tx-hash").val(contract.deployTransaction.hash);

        //Enable the submit button which was disabled and remove the spinning loader
        //Comment the below for now, since there's a significant delay between after contract is minted on Metamask and redirecting the form to the success page
        //$("#create-contract").removeAttr("disabled");
        //$("#loading").html("");

        //Submit the form after contract is created
        $("#acadp-post-form-contract")[0].submit();
      } catch (error) {
        console.log(error);
        $("#create-contract").removeAttr("disabled");
        $("#loading").html("");
      }
    });

    //Mint token upon pressing the submit button on mint token page
    $("#acadp-checkout-form").on("submit", async function (e) {
      e.preventDefault();

      const tokenUri = document.getElementById("token-uri");
      const fileHash = document.getElementById("file-hash");
      const contractAddress = document.getElementById("contract-address");

      if (tokenUri) {
        var tokenUriValue = tokenUri.value;
      }

      if (fileHash) {
        var fileHashValue = fileHash.value;
      }

      if (contractAddress) {
        var contractAddressValue = contractAddress.value;
      }

      //DEBUG
      console.log("contract: " + contractAddressValue);
      console.log("wallet: " + walletAddress);

      try {
        //Prevent user from messing up the process while minting in progress
        $("#acadp-checkout-submit-btn").prop("disabled", true);
        $("#go-back-btn").prop("disabled", true);
        $("#loading").html('<span class="acadp-spinner"></span>');

        const contract = new ethers.Contract(
          contractAddressValue,
          abi,
          provider
        );

        const contractWithSigner = contract.connect(signer);

        let tx = null;
        if (tokenUriValue) {
          tx = await contractWithSigner.functions.createToken(tokenUriValue, {
            from: walletAddress,
            gasLimit: 4700000,
          });
        } else if (fileHashValue) {
          tx = await contractWithSigner.functions.createToken(fileHashValue, {
            from: walletAddress,
            gasLimit: 4700000,
          });
        }

        // The transaction that was sent to the network
        console.log(`Transaction hash: ${tx.hash}`);

        // TWe must wait until it is mined
        const receipt = await tx.wait();

        console.log(`Transaction confirmed in block ${receipt.blockNumber}`);
        console.log(`Gas used: ${receipt.gasUsed.toString()}`);

        $("#user-wallet").val(walletAddress);
        $("#tx-hash").val(tx.hash);
        $("#block-number").val(receipt.blockNumber);
        $("#gas-used").val(receipt.gasUsed.toString());
        $("#amount").val(receipt.gasUsed.toString());

        //Enable the submit button which was disabled and remove the spinning loader
        //Comment the below for now, since there's a significant delay between after contract is minted on Metamask and redirecting the form to the success page
        //$("#acadp-checkout-submit-btn").removeAttr("disabled");
        //$("#loading").html("");

        //Submit the form after contract is created
        $("#acadp-checkout-form")[0].submit();
      } catch (error) {
        console.log(error);
        $("#acadp-checkout-submit-btn").removeAttr("disabled");
        $("#go-back-btn").removeAttr("disabled");
        $("#loading").html("");
      }
    });

    // Validate checkout form
    var acadp_checkout_submitted = false;

    $("#acadp-checkout-form").on("submit", function () {
      if (acadp_checkout_submitted) {
        return false;
      }

      acadp_checkout_submitted = true;
    });
  });
})(jQuery);
