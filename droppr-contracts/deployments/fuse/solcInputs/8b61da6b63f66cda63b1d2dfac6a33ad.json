{
  "language": "Solidity",
  "sources": {
    "contracts/AirdropDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./FeeManager.sol\";\n\n\ncontract AirdropDistributor is FeeManager {\n    using SafeMath for uint256;\n\n    function withdraw (address asset) public onlyOwner {\n        if (asset == address(0)){\n            payable(msg.sender).transfer(address(this).balance);\n        }\n        uint256 tokenBalance = IERC20(asset).balanceOf(address(this));\n        IERC20(asset).transfer(msg.sender, tokenBalance);\n    }\n\n\n    function sendCoinsSingleValue (address[] memory recipients, uint256 amount) public payable {\n        uint256 totalAmount = recipients.length.mul(amount);\n        if(isSubscribed(msg.sender)){\n            require(msg.value >= totalAmount, \"Insufficient amount\");\n        } else {\n            require(msg.value >= totalAmount.add(serviceFee()), \"Insufficient amount\");\n        }\n        require(recipients.length <= 256, \"Recipients array too big\");\n        for(uint16 i=0 ; i<recipients.length ; i++){\n            // solhint-disable-next-line\n            require(payable(recipients[i]).send(amount), \"\");\n        }\n    }\n\n    function sum (uint256[] memory arr) public pure returns (uint) {\n        uint256 ans = 0;\n        for(uint i=0 ; i<arr.length ; i++)\n            ans = ans.add(arr[i]);\n        return ans;\n    }\n\n    function sendCoinsManyValues (address[] memory recipients, uint256[] memory amounts) public payable {\n        uint256 totalAmount = sum(amounts);\n        require (recipients.length == amounts.length, \"invalid Arguments\");\n        if(isSubscribed(msg.sender)){\n            require(msg.value >= totalAmount, \"Insufficient amount\");\n        } else {\n            require(msg.value >= totalAmount.add(serviceFee()), \"Insufficient amount\");\n        }\n        require(recipients.length <= 256, \"Recipients array too big\");\n        for(uint16 i=0 ; i<recipients.length ; i++){\n            // solhint-disable-next-line\n            require(payable(recipients[i]).send(amounts[i]), \"\");\n        }\n    }\n\n    function sendTokensSingleValue (address[] memory recipients, uint256 amount, address asset) public payable {\n        uint256 totalAmount = recipients.length.mul(amount);\n\n        require(\n            IERC20(asset).allowance(msg.sender, address(this)) >= \n            totalAmount, \n            \"Insufficient allowance\"\n        );\n        require(\n            IERC20(asset).balanceOf(msg.sender) >= totalAmount,\n            \"Insufficient balance\"\n        );\n        require(isSubscribed(msg.sender) || msg.value >= serviceFee(), \"Insufficient fees\");\n\n        for(uint16 i=0 ; i<recipients.length ; i++){\n            require(IERC20(asset).transferFrom(msg.sender, recipients[i], amount), \"\");\n        }\n    }\n\n    function sendTokensManyValues (address[] memory recipients, uint256[] memory amounts, address asset) public payable {\n        uint256 totalAmount = sum(amounts);\n\n        require(IERC20(asset).allowance(msg.sender, address(this)) >= totalAmount, \"Insufficient allowance\");\n        require(IERC20(asset).balanceOf(msg.sender) >= totalAmount, \"Insufficient balance\");\n        require(isSubscribed(msg.sender) || msg.value >= serviceFee(), \"Insufficient fees\");\n\n        for(uint16 i=0 ; i<recipients.length ; i++){\n            require(IERC20(asset).transferFrom(msg.sender, recipients[i], amounts[i]), \"\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/FeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./upgradeability/EternalStorage.sol\";\n\n\ncontract FeeManager is EternalStorage {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function owner() public view returns (address) {\n        return addressStorage[keccak256(abi.encode(\"owner\"))];\n    }\n\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function _transferOwnership(address newOwner) internal {\n        address oldOwner = owner();\n        addressStorage[keccak256(abi.encode(\"owner\"))] = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function serviceFee() public returns (uint256) {\n        if(msg.sender == owner()) return 0;\n        return uintStorage[keccak256(abi.encode(\"serviceFee\"))];\n    }\n\n    function setServiceFee (uint256 fee) public onlyOwner {\n        uintStorage[keccak256(abi.encode(\"serviceFee\"))] = fee;\n    }\n\n    function subscribtionFee() public returns (uint256) {\n        return uintStorage[keccak256(abi.encode(\"subscribtionFee\"))];\n    }\n\n    function setSubscribtionFee (uint256 _subscribtionFee) public onlyOwner {\n        uintStorage[keccak256(abi.encode(\"subscribtionFee\"))] = _subscribtionFee;\n    }\n\n    function isSubscribed (address _addr) public view returns (bool) {\n        return msg.sender == owner() || boolStorage[keccak256(abi.encode(\"subscribers\", _addr))];\n    }\n\n    function _setSubscriber (address _addr, bool value) internal {\n        boolStorage[keccak256(abi.encode(\"subscribers\", _addr))] = value;\n    }\n\n    function setFees (uint256 _serviceFee, uint256 _subscribtionFee) public onlyOwner {\n        setServiceFee(_serviceFee);\n        setSubscribtionFee(_subscribtionFee);\n    }\n\n    function initializeOwner () public {\n        require(owner() == address(0), \"\");\n        _transferOwnership(msg.sender);\n    }\n    \n    modifier onlySubscriber () {\n        require(isSubscribed(msg.sender), \"Message sender is not subscribed\");\n        _;\n    }\n\n    function subscribe () public payable {\n        require(msg.value >= subscribtionFee(), \"Insufficient amount\");\n        _setSubscriber(msg.sender, true);\n    }\n\n    function unsubscribe () public {\n        _setSubscriber(msg.sender, false);\n    }\n\n    function giftSubscribtion (address to) public payable {\n        require(msg.value >= subscribtionFee(), \"Insufficient amount\");\n        _setSubscriber(to, true);\n    }\n\n    function ownerGiftSubscribtion (address to) public onlyOwner {\n        _setSubscriber(to, true);\n    }\n\n}"
    },
    "contracts/upgradeability/EternalStorage.sol": {
      "content": "pragma solidity >= 0.4.18 <= 0.8.0;\n\n/**\n * @title EternalStorage\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\n */\ncontract EternalStorage {\n\n  mapping(bytes32 => uint256) internal uintStorage;\n  mapping(bytes32 => string) internal stringStorage;\n  mapping(bytes32 => address) internal addressStorage;\n  mapping(bytes32 => bytes) internal bytesStorage;\n  mapping(bytes32 => bool) internal boolStorage;\n  mapping(bytes32 => int256) internal intStorage;\n\n\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}